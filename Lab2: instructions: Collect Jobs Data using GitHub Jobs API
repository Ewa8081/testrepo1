
Skills Network Logo

Collecting Data Using APIs
In this notebook, we will:

Collect job data from Jobs API
Store the collected data into an excel spreadsheet.
Step by step
To run this notebook, firstly we need to click on the Jobs_API notebook link, which is found in this same Github repository. The file contains flask code which is required to run the Jobs API data.

Now, to run the code in the file that opens up we need to follow the below steps.

Step1: We download the file.

Step2: We upload it on the IBM Watson studio. (If IBM Watson Cloud service does not work in our system, we can follow the alternate Step 2 below)

Step2(alternate): We upload it in oour SN labs environment using the upload button which is highlighted in red in the image below: We need to remember to upload this Jobs_API file in the same folder as oour current .ipynb file



Step3: We run all the cells of the Jobs_API file. (Even if we receive an asterik sign after running the last cell, the code works fine.)

If you want to learn more about flask, which is optional, you can click on this link here.

Once we run the flask code, we can start with the fllowing instructions.

Dataset Used in this Assignment
The dataset used in this notebook comes from the following source: https://www.kaggle.com/promptcloud/jobs-on-naukricom under the under a Public Domain license.

The original dataset is a csv. We already converted the csv to json.

Collecting Jobs Data using Jobs API
We are going to determine the number of jobs currently open for various technologies and for various locations

First, we will collect the number of job postings for the following locations using the API:

Los Angeles
New York
San Francisco
Washington DC
Seattle
Austin
Detroit
#We import required libraries
import pandas as pd
import json
We write a function to get the number of jobs for the Python technology.

The keys in the json are
Job Title

Job Experience Required

Key Skills

Role Category

Location

Functional Area

Industry

Role

We can also view the json file contents from the following json URL.

api_url="http://127.0.0.1:5000/data/all"
def get_number_of_jobs_T(technology):
    
    response_api = requests.get(api_url)

    number_of_jobs = 0

    if response_api.ok:            
        jobs = response_api.json()

    for job in jobs:
        key = job.get('Key Skills')

        if key.find(technology) > -1 :
            number_of_jobs = number_of_jobs + 1

    number_of_jobs
    
    return technology,number_of_jobs
Let's call the function for Python and checking if it works.

get_number_of_jobs_T("Python")
('Python', 1173)
We write a function to find number of jobs in US for a location of your choice

def get_number_of_jobs_L(location):
    
    response_api = requests.get(api_url)

    number_of_jobs = 0

    if response_api.ok:            
        jobs = response_api.json()

    for job in jobs:
        loc = job.get('Location')

        if loc.find(location) > -1 :
            number_of_jobs = number_of_jobs + 1

    number_of_jobs
    return location,number_of_jobs
Let' call the function for Los Angeles and check if it is working.

get_number_of_jobs_L("Los Angeles")
('Los Angeles', 640)
Storing the results in an excel file
We call the API for all the given technologies above and write the results in an excel spreadsheet.

We create a python list of all locations for which you need to find the number of jobs postings.

locations = ['Los Angeles','New York','San Francisco','Washington DC','Seattle','Austin','Detroit']
We import libraries required to create excel spreadsheet

from openpyxl import Workbook
We create a workbook and select the active worksheet

wb1 = Workbook()
ws1 = wb1.active
We find the number of jobs postings for each of the location in the above list and write the Location name and the number of jobs postings into the excel spreadsheet.

ws1.append(['Location','Number of Jobs'])

for i in range(len(locations)):
    ws1.append(get_number_of_jobs_L(locations[i]))
We save into an excel spreadsheet named 'job-postings.xlsx'.

wb1.save('2.a-job-postings (Collected from API).xlsx')
wb1.close()
In the similar way, we can try for below given technologies and results can be stored in an excel sheet.

We collect the number of job postings for the following languages using the API:

C
C#
C++
Java
JavaScript
Python
Scala
Oracle
SQL Server
MySQL Server
PostgreSQL
MongoDB
wb2 = Workbook()
ws2 = wb2.active

languages = ['C','C#','C++','Java','JavaScript','Python','Scala','Oracle','SQL Server','MySQL Server','PostgreSQL','MongoDB']

ws2.append(['Languages','Number of Jobs'])

for i in range(len(languages)):
    ws2.append(get_number_of_jobs_T(languages[i]))

wb2.save('2.a-job-postings-languages (Collected from API).xlsx')
wb2.close()
